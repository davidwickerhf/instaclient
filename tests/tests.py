from typing import List
import pytest, json

from selenium.webdriver.common.by import By
from selenium.webdriver.remote import webelement
from selenium.webdriver.support import expected_conditions as EC

from instaclient import InstaClient
from instaclient.errors import *
from instaclient.instagram import profile
from instaclient.instagram.comment import Comment
from instaclient.instagram.hashtag import Hashtag
from instaclient.instagram.instaobject import InstaBaseObject
from instaclient.instagram.notification import Notification
from instaclient.instagram.post import Post
from instaclient.instagram.profile import Profile

class State:
    def __init__(self, state, username, password, inc_username, inc_password, target_user, target_password,  post_shortcode, tag, dm_text, comment_text, **args):
        self.client:InstaClient = InstaClient()
        self.target_client:InstaClient = None
        self.state = state
        self.username = username
        self.password = password
        self.inc_username = inc_username
        self.inc_password = inc_password
        self.target_user = target_user
        self.target_password = target_password
        self.post_shortcode = post_shortcode
        self.tag = tag
        self.dm_text = dm_text
        self.comment_text = comment_text

    def require_login(self):
        if not self.client.logged_in:
            self.client.login(self.username, self.password)
        return self

    def require_target_login(self):
        if not self.target_client:
            self.target_client = InstaClient().login(self.target_user, self.target_password)
            return self
        if not self.target_client.logged_in:
            self.target_client.login(self.target_user, self.target_password)
            return self

    def save(self):
        with open('tests/tests-config.json', 'w+') as f:
            state = self.__dict__
            del state['client']
            del state['target_client']
            json.dump(state, f)

    def load():
        with open('tests/tests-config.json', 'r+') as f:
            data = json.load(f)
            return State(**data)


@pytest.fixture(scope='session')
def state() -> State:
    return State.load()

# DRIVER METHODS
# TODO connect()
def test_connect(state: State):
    client = state.client.connect()
    assert client.connected is True

# TODO disconnect()                                                     
def test_disconnect(state: State):
    state.client.disconnect()
    assert state.client.driver is None

# AUTH
# login()
def test_login(state: State):
    try:
        state.client.login(state.username, state.password) # Go through Login Procedure
    except VerificationCodeNecessary:
        # This error is raised if the user has 2FA turned on.
        code = input('Enter the 2FA security code generated by your Authenticator App or sent to you by SMS')
        state.client.input_verification_code(code)
    except SuspisciousLoginAttemptError as error:
        # This error is reaised by Instagram
        if error.mode == SuspisciousLoginAttemptError.EMAIL:
            code = input('Enter the security code that was sent to you via email: ')
        else:
            code = input('Enter the security code that was sent to you via SMS: ')
        state.client.input_security_code(code)

    assert state.client.logged_in is True

# resend_security_code()
# input_security_code()
# input_verification_code()
# TODO logout()
def test_logout(state: State):
    state.client.logout()
    assert state.client.logged_in is False

# CHECKERS
# TODO check_status()
def test_check_status(state: State):
    assert state.client.check_status() is False
    state.client.login(state.username, state.password)
    assert state.client.check_status() is True
    
# TODO is_valid_user()
def test_is_valid_user(state: State):
    try:
        result, profile = state.client.is_valid_user(state.target_user)
    except NotLoggedInError:
        state.require_login()
        result, profile = state.client.is_valid_user(state.target_user)
    assert result is True

    try:
        result, profile = state.client.is_valid_user(state.inc_username)
    except NotLoggedInError:
        state.require_login()
        result, profile = state.client.is_valid_user(state.inc_username)
    assert result is False

# SCRAPING
# TODO get_notifications()
def test_get_notifications(state: State):
    state.require_login()
    result = state.client.get_notifications(count=1)[0]
    assert isinstance(result, Notification) is True

# TODO get_profile()
def test_get_profile(state: State):
    # Correct User
    profile = state.client.get_profile(state.target_user)
    assert isinstance(profile, Profile) is True
    assert profile.username == state.target_user

    # Incorrect User
    profile = state.client.get_profile(state.inc_username)
    assert profile is None


# TODO get_followers()
def test_get_followers_api(state: State):
    state.require_login()
    result, cursor = state.client.get_followers(state.target_user, count=25)
    assert isinstance(result, list) is True
    assert isinstance(result[0], str) is True

def test_get_followers_api_deep(state:State):
    state.require_login()
    result, cursor = state.client.get_followers(state.target_user, count=25, deep_scrape=True)
    assert isinstance(result, list) is True
    assert isinstance(result[0], Profile) is True

def test_get_followers_manual(state: State):
    state.require_login()
    result, cursor = state.client.get_followers(state.target_user, count=25, use_api=False)
    assert isinstance(result, list) is True
    assert isinstance(result[0], str) is True

def test_get_followers_manual_deep(state: State):
    state.require_login()
    result, cursor = state.client.get_followers(state.target_user, count=25, use_api=False, deep_scrape=True)
    assert isinstance(result, list) is True
    assert isinstance(result[0], Profile) is True
    

# TODO get_user_posts()
def test_get_user_posts(state: State):
    state.require_login()
    result = state.client.get_user_posts(state.target_user, count=25)
    assert isinstance(result, list) is True
    assert isinstance(result[0], str) is True

def test_get_user_posts_deep(state: State):
    state.require_login()
    result = state.client.get_user_posts(state.target_user, count=25, deep_scrape=True)
    assert isinstance(result, list) is True
    assert isinstance(result[0], Post) is True

# get_post()
def test_get_post(state: State):
    result = state.client.get_post(state.post_shortcode)
    assert isinstance(result, Post)
    assert result.shortcode == state.post_shortcode

# TODO get_hashtag()
def test_get_hashtag(state: State):
    result = state.client.get_hashtag(state.tag)
    assert isinstance(result, Hashtag) is True
    assert result.name == state.tag

# TODO get_hashtag_posts()
def test_get_hashtag_posts(state: State):
    state.require_login()
    result = state.client.get_hashtag_posts(state.tag, count=10)
    assert isinstance(result, list) is True
    assert isinstance(result[0], str) is True

def test_get_hashtag_posts_deep(state: State):
    state.require_login()
    result = state.client.get_hashtag_posts(state.tag, count=10, deep_scrape=True)
    assert isinstance(result, list) is True
    assert isinstance(result[0], Post) is True


# INTERACTIONS
# TODO follow_user()
def test_follow_user(state: State):
    state.require_login()
    profile = state.client.get_profile(state.target_user, context=True)
    result = state.client.follow_user(state.target_user)
    profile.refresh()
    assert isinstance(result, Profile) is True
    assert profile.followed_by_viewer is True


# TODO unfollow_user()
def test_unfollow_user(state: State): 
    state.require_login()
    profile = state.client.get_profile(state.target_user, context=True)
    result = state.client.unfollow_user(state.target_user)
    profile.refresh()
    assert isinstance(result, Profile) is True
    assert profile.followed_by_viewer is False

# TODO send_dm()
def test_send_dm(state: State):
    state.require_login()
    result = state.client.send_dm(state.target_user, state.dm_text)
    message:webelement = state.client._find_element(EC.presence_of_element_located((By.XPATH, '//div[@class="VdURK e9_tN JRTzd"]')))[-1]
    assert message.text == state.dm_text

# TODO comment_post()
def test_comment_post(state: State):
    state.require_login()
    result = state.client.comment_post(state.post_shortcode, state.comment_text)
    assert isinstance(result, Comment) is True

    state.require_target_login()
    noti = state.target_client.get_notifications(types=[InstaBaseObject.GRAPH_COMMENT], count=10)
    assert isinstance(noti, list) is True
    assert isinstance(noti[0], Notification) is True

    found = None
    for notification in noti:
        if notification.from_user.username == state.username:
            found = notification
            break
    assert isinstance(found, Notification) is True
    assert found.get_type() == InstaBaseObject.GRAPH_COMMENT

# TODO like_post()
def test_like_post(state: State):
    state.require_login()
    post = state.client.get_post(state.post_shortcode, context=True)
    post.like()
    assert isinstance(post, Post) is True

    post.refresh()
    assert post.viewer_has_liked is True

# TODO unlike_post()
def test_unlike_post(state: State):
    state.require_login()
    post = state.client.get_post(state.post_shortcode, context=True)
    post.unlike()
    assert isinstance(post, Post) is True

    post.refresh()
    assert post.viewer_has_liked is False